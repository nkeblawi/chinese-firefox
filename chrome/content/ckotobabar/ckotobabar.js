// Generated by CoffeeScript 1.3.3
(function() {
  var exports;

  exports = window;

  exports.ckotobabar = {
    _userEntryDelim: '\t',
    _userEntryFilename: 'userentries.txt',
    onLoad: function(e) {
      var charset, dir, file, fis, istream, line, lines, prefs, repChar, sep, splitter, str, temp, _i, _len;
      try {
        prefs = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.cperapera.');
        dir = Components.classes["@mozilla.org/file/directory_service;1"].getService(Components.interfaces.nsIProperties).get("ProfD", Components.interfaces.nsILocalFile);
        dir.append("cperapera");
        if (dir.exists()) {
          file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
          sep = null;
          if (dir.path.search(/\\/) !== -1) {
            sep = '\\';
          } else {
            sep = '/';
          }
          file.initWithPath(dir.path + sep + this._userEntryFilename);
          if (!file.exists()) {
            return;
          }
          charset = "utf-8";
          repChar = Components.interfaces.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER;
          fis = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
          fis.init(file, 0x01, 0x4, null);
          istream = Components.classes["@mozilla.org/intl/converter-input-stream;1"].createInstance(Components.interfaces.nsIConverterInputStream);
          istream.init(fis, charset, 1024, repChar);
          str = {};
          switch (prefs.getIntPref("snlf")) {
            case 0:
              splitter = '\n';
              break;
            case 1:
              splitter = '\r\n';
              break;
            case 2:
              splitter = '\r';
          }
          while (istream.readString(4096, str) !== 0) {
            lines = str.value.split(splitter);
            for (_i = 0, _len = lines.length; _i < _len; _i++) {
              line = lines[_i];
              temp = line.split(this._userEntryDelim);
              if (temp.length !== 3) {
                continue;
              }
              this.addEntry(temp[0], temp[1], temp[2]);
            }
          }
        }
        istream.close();
        return fis.close();
      } catch (ex) {
        return alert("Error loading user entries: " + ex);
      }
    },
    onUnload: function(e) {
      return this.saveUserEntries();
    },
    E: function(e) {
      return document.getElementById(e);
    },
    removeAllEntries: function() {
      var lbox, _i, _len, _ref, _results;
      _ref = Array.from(this.E("entriesListbox").childNodes);
      var _refCopy = _ref.slice(0);
      _results = [];
      for (_i = 0, _len = _refCopy.length; _i < _len; _i++) {
        lbox = _refCopy[_i];
        if (lbox.nodeName === "listitem") {
          _results.push(this.E("entriesListbox").removeChild(lbox));
        }
      }
      return _results;
    },
    removeSelectedEntries: function() {
      var lbox, params, pb, _i, _len, _ref, _results;
      if (!this.isAtLeastOneChecked()) {
        return;
      }
      pb = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.cperapera.');
      if (pb.getBoolPref('show_warning_dlg') === true) {
        params = {
          out: null
        };
        window.openDialog("chrome://cperapera/content/ckotobabar/yesnodialog.xul", "", "chrome, dialog, modal, centerscreen, resizable=no", params).focus();
        //window.openDialog("chrome:/content/ckotobabar/yesnodialog.xul", "", "chrome, dialog, modal, centerscreen, resizable=no", params).focus();
        if (!(params.out != null)) {
          return;
        }
      }
      _ref = Array.from(this.E("entriesListbox").childNodes);
      var _refCopy = _ref.slice(0); // make copy of childNode array, because the previous line assigns the array by reference - not by value
      _results = [];
      for (_i = 0, _len = _refCopy.length; _i < _len; _i++) {
        lbox = _refCopy[_i];
        if ((lbox.nodeName === "listitem") && (lbox.firstChild.firstChild.checked === true)) {
          _results.push(this.E("entriesListbox").removeChild(lbox));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    fillListboxWithEntries: function() {
      var entries, entry, listBox, newCell, newCheckbox, newItem, _i, _len;
      entries = this.getEntries();
      this.removeAllEntries();
      listBox = this.E("entriesListbox");
      for (_i = 0, _len = entries.length; _i < _len; _i++) {
        entry = entries[_i];
        if (entry.length !== 3) {
          alert("Problem importing entries...died on #" + ii);
          return;
        }
        newItem = document.createElement("listitem");
        newItem.addEventListener('click', (function() {
          return exports.ckotobabar.toggleCheck("pera_sbcb" + ii);
        }), false);
        newCell = document.createElement("listcell");
        newCheckbox = document.createElement("checkbox");
        newCheckbox.id = "pera_sbcb" + ii;
        newCell.appendChild(newCheckbox);
        newItem.appendChild(newCell);
        newCell = document.createElement("listcell");
        newCell.setAttribute("label", entry[0]);
        newItem.appendChild(newCell);
        newCell = document.createElement("listcell");
        newCell.setAttribute("label", entry[1]);
        newItem.appendChild(newCell);
        newCell = document.createElement("listcell");
        newCell.setAttribute("label", entry[2]);
        newItem.appendChild(newCell);
        listBox.appendChild(newItem);
      }
    },
    addEntry: function(word, reading, meaning) {
      var count, lbox, newCell, newCheckbox, newItem, _i, _len, _ref;
      count = 0;
      _ref = this.E("entriesListbox").childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lbox = _ref[_i];
        if (lbox.nodeName === "listitem") {
          ++count;
        }
      }
      newItem = document.createElement("listitem");
      newItem.addEventListener('click', (function() {
        return exports.ckotobabar.toggleCheck("pera_sbcb" + count);
      }), false);
      newCell = document.createElement("listcell");
      newCheckbox = document.createElement("checkbox");
      newCheckbox.id = "pera_sbcb" + count;
      newCell.appendChild(newCheckbox);
      newItem.appendChild(newCell);
      newCell = document.createElement("listcell");
      newCell.setAttribute("label", word);
      newItem.appendChild(newCell);
      newCell = document.createElement("listcell");
      newCell.setAttribute("label", reading);
      newItem.appendChild(newCell);
      newCell = document.createElement("listcell");
      newCell.setAttribute("label", meaning);
      newItem.appendChild(newCell);
      return this.E("entriesListbox").appendChild(newItem);
    },
    setAllCheckboxes: function(setCheckedTo) {
      var lbox, _i, _len, _ref, _results;
      _ref = this.E("entriesListbox").childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lbox = _ref[_i];
        if (lbox.nodeName === "listitem") {
          _results.push(lbox.firstChild.firstChild.checked = setCheckedTo);
        }
      }
      return _results;
    },
    toggleCheck: function(checkBoxID) {
      var cbox;
      cbox = document.getElementById(checkBoxID);
      return cbox != null ? cbox.checked = !(cbox != null ? cbox.checked : void 0) : void 0;
    },
    isAtLeastOneChecked: function() {
      var cbox, lbox, _i, _len, _ref;
      _ref = this.E("entriesListbox").childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lbox = _ref[_i];
        //if (listBoxChilds[ii].nodeName !== "listitem") {
        if (lbox.nodeName !== "listitem") {
          continue;
        }
        //cbox = listBoxChilds[ii].firstChild.firstChild;
        //if (cbox.checked === true) {
        litem = lbox.firstChild.firstChild;
        if (litem.checked === true) {
          return true;
        }
      }
      return false;
    },
    /* not supported
    	grabEntries: () ->
    		#dump("in testMe()\n")
    		mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
    		 .getInterface(Components.interfaces.nsIWebNavigation)
    		 .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
    		 .rootTreeItem
    		 .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
    		 .getInterface(Components.interfaces.nsIDOMWindow) 
    
    		mainDoc = mainWindow.content.document 
    		ii = 0
    		word
    		meaning
    		
    		allChecks = mainDoc.getElementsByClassName("ppk_check")
    		
    		for(ii = 0 ii < allChecks.length ii++)
    		
    			if allChecks[ii].checked)
    			
    				jword = allChecks[ii].getAttribute("ppk_jword")
    				eword = allChecks[ii].getAttribute("ppk_eword")
    				
    				@addEntry(jword,"",eword)
    				allChecks[ii].checked = false
    				#dump("saved: " + jword + ", " + eword)
    			
    		
    		#dump("out testMe()\n")
    */

    saveUserEntries: function() {
      var dir, sep;
      dir = Components.classes["@mozilla.org/file/directory_service;1"].getService(Components.interfaces.nsIProperties).get("ProfD", Components.interfaces.nsILocalFile);
      dir.append("cperapera");
      if (!dir.exists()) {
        dir.create(Components.interfaces.nsIFile.DIRECTORY_TYPE, 0x1ed);
      }
      if (dir.path.search(/\\/) !== -1) {
        sep = '\\';
      } else {
        sep = '/';
      }
      return this.exportToFile(this._userEntryDelim, dir.path + sep + this._userEntryFilename, true);
    },
    exportToFile: function(delim, filenameString, savingUserEntries) {
      var charset, filename, fos, fp, isEdictFormat, lbox, litems, meaning, nsIFilePicker, os, outputEntry, prefs, reading, rv, strOut, t, word, _i, _len, _ref;
      prefs = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.cperapera.');
      
      // added this line of code to ensure savingUserEntries is non-null
      savingUserEntries = this.isAtLeastOneChecked();

      try {
        if ((!(savingUserEntries != null)) || (!savingUserEntries) && (!this.isAtLeastOneChecked())) {
          alert('No entries selected to export.');
          return;
        }
        isEdictFormat = false;
        if (!(delim != null)) {
          switch (prefs.getCharPref("ssep").toLowerCase()) {
            case "edict":
              isEdictFormat = true;
              break;
            case "comma":
              delim = ',';
              break;
            case "space":
              delim = ' ';
              break;
            case "tab":
              delim = '\t';
          }
        }
        filename = null;
        if (!(filenameString != null)) {
          nsIFilePicker = Components.interfaces.nsIFilePicker;
          fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(nsIFilePicker);
          fp.init(window, "Select a Destination", nsIFilePicker.modeSave);
          fp.appendFilters(nsIFilePicker.filterText | nsIFilePicker.filterAll);
          rv = fp.show();
          if ((rv === nsIFilePicker.returnOK) || (rv === nsIFilePicker.returnReplace)) {
            filename = fp.file;
          } else {
            return;
          }
        } else {
          filename = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
          filename.initWithPath(filenameString);
        }
        charset = !(savingUserEntries != null) || savingUserEntries === false ? prefs.getCharPref("sfcs") : "utf-8";
        os = Components.classes["@mozilla.org/intl/converter-output-stream;1"].createInstance(Components.interfaces.nsIConverterOutputStream);
        fos = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
        fos.init(filename, 0x02 | 0x08 | 0x20, 0x1b6, 0);
        os.init(fos, charset, 0, 0x0000);
        _ref = this.E("entriesListbox").childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lbox = _ref[_i];
          if (lbox.nodeName !== "listitem") {
            continue;
          }
          litems = lbox.childNodes;
          //outputEntry = (!(savingUserEntries != null)) || (savingUserEntries === false) ? litems[0].firstChild.checked : true;
          outputEntry = litems[0].firstChild.checked;
          if (outputEntry) {
            t = litems[1];
            word = litems[1].getAttribute("label");
            reading = litems[2].getAttribute("label");
            meaning = litems[3].getAttribute("label").replace(/\r/g, '');
            strOut = isEdictFormat ? "" + word + " [" + reading + "] /" + meaning + "/" : word + delim + reading + delim + meaning;
            switch (prefs.getIntPref("snlf")) {
              case 0:
                strOut += '\n';
                break;
              case 1:
                strOut += '\r\n';
                break;
              case 2:
                strOut += '\r';
            }
            os.writeString(strOut);
          }
        }
        os.close();
        return fos.close();
      } catch (ex) {
        return alert("Unable to export file: " + ex);
      }
    },
    copyToClipboard: function() {
      var allEntriesString, delim, isDelimited, isEdictFormat, lbox, litems, meaning, params, reading, strOut, t, word, _i, _len, _ref;
      if (!this.isAtLeastOneChecked()) {
        alert("No entries selected to export.");
        return;
      }
      delim = "\t";
      isDelimited = false;
      isEdictFormat = false;
      if (delim != null) {
        isDelimited = true;
      } else {
        params = {
          out: null
        };
        window.openDialog("chrome://cperapera/content/ckotobabar/exportdialog.xul", "", "chrome, dialog, modal,centerscreen, resizable=no", params).focus();
        if (!(params.out != null)) {
          return;
        } else {
          if (params.out.edict) {
            isEdictFormat = true;
          } else {
            isDelimited = true;
            delim = params.out.delimiter;
          }
        }
      }
      allEntriesString = "";
      _ref = this.E("entriesListbox").childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lbox = _ref[_i];
        if (lbox.nodeName !== "listitem") {
          continue;
        }
        litems = lbox.childNodes;
        if (litems[0].firstChild.checked) {
          t = litems[1];
          word = litems[1].getAttribute("label");
          reading = litems[2].getAttribute("label");
          meaning = litems[3].getAttribute("label");
          if (isDelimited) {
            strOut = word + delim + reading + delim + meaning + "\n";
            allEntriesString += strOut;
          } else if (isEdictFormat) {
            strOut = "" + word + " [" + reading + "] /" + meaning + "/\n";
            allEntriesString += strOut;
          }
        }
      }
      return Components.classes['@mozilla.org/widget/clipboardhelper;1'].getService(Components.interfaces.nsIClipboardHelper).copyString(allEntriesString);
    }
  };

  window.addEventListener("load", (function(e) {
    return exports.ckotobabar.onLoad(e);
  }), false);

  window.addEventListener("unload", (function(e) {
    return exports.ckotobabar.onUnload(e);
  }), false);

}).call(this);
